c(1,2,3,4,5)
tb <- c(1,2,3,4)
tb
r <- c("diamonts"=1, "coco"=2)
r
remains <- c(11,12,13,14)
suits <- c("spades","hearts","diamonds","clubs")
remains
suits
names(remains)<- suits
remains
# How to Create and Name Vectors in R
remains <- c(11,12,13,14)
remains <- c(11,12,13,14)
suits <- c("spades","hearts","diamonds","clubs")
names(remains)<- suits
remains
remains <- c(11,12,13,14)
suits <- c("spades","hearts","diamonds","clubs")
names(remains)<- suits
remains
remains <- c(11,12,13,14)
suits <- c("spades","hearts","diamonds","clubs")
names(remains)<- suits
remains <- c(11,12,13,14)
suits <- c("spades","hearts","diamonds","clubs")
names(remains)<- suits
print(remains)
remains <- c(11,12,13,14)
print(remains)
remains <- c(11,12,13,14)
print(remains)
print(remains)
v <- 5:13
print(v)
# How to Create and Name Vectors in R
v <- 5:13
print(v)
remains <- c(11,12,13,14)names(remains)<- suits
cls
clear
# How to Create and Name Vectors in R
v <- 5:13
print(v)
# Atomic vector of type raw.
print(charToRaw('hello'))
# Atomic vector of type character.
print("abc");
# Atomic vector of type double.
print(12.5)
# Atomic vector of type integer.
print(63L)
# Atomic vector of type logical.
print(TRUE)
# Atomic vector of type complex.
print(2+3i)
# Atomic vector of type raw.
print(charToRaw('hello'))
# Creating a sequence from 5 to 13.
v <- 5:13
print(v)
# Creating a sequence from 6.6 to 12.6.
v <- 6.6:12.6
print(v)
# If the final element specified does not belong to the sequence then it is discarded.
v <- 3.8:11.4
print(v)
# Create vector with elements from 5 to 9 incrementing by 0.4.
print(seq(5, 9, by = 0.4))
# The logical and numeric values are converted to characters.
s <- c('apple','red',5,TRUE)
print(s)
# Accessing vector elements using position.
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(2,3,6)]
print(u)
# Accessing vector elements using logical indexing.
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
# Accessing vector elements using negative indexing.
x <- t[c(-2,-5)]
print(x)
# Accessing vector elements using 0/1 indexing.
y <- t[c(0,0,0,0,0,0,1)]
print(y)
# Create two vectors.
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11,0,8,1,2)
# Vector addition.
add.result <- v1+v2
print(add.result)
# Vector subtraction.
sub.result <- v1-v2
print(sub.result)
# Vector multiplication.
multi.result <- v1*v2
print(multi.result)
# Vector division.
divi.result <- v1/v2
print(divi.result)
# Vector subtraction.
sub.result <- v1-v2
print(sub.result)
# Vector subtraction.
sub.result <- v1-v2
print(sub.result)
# Vector multiplication.
multi.result <- v1*v2
print(multi.result)
# Vector division.
divi.result <- v1/v2
print(divi.result)
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11)
# V2 becomes c(4,11,4,11,4,11)
add.result <- v1+v2
print(add.result)
sub.result <- v1-v2
print(sub.result)
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11)
# V2 becomes c(4,11,4,11,4,11)
add.result <- v1+v2
print(add.result)
sub.result <- v1-v2
print(sub.result)
# Sort the elements of the vector.
sort.result <- sort(v)
print(sort.result)
v <- c(3,8,4,5,0,11, -9, 304)
# Sort the elements of the vector.
sort.result <- sort(v)
print(sort.result)
# Sort the elements in the reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
# Sorting character vectors.
v <- c("Red","Blue","yellow","violet")
sort.result <- sort(v)
print(sort.result)
# Sorting character vectors in reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
print(list_data)
# Create a list containing strings, numbers, vectors and a logical
# values.
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
# Create a list containing strings, numbers, vectors and a logical
# values.
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),list("green",12.3))
print(list_data)
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Show the list.
print(list_data)
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")
# Access the first element of the list.
print(list_data[1])
# Access the first element of the list.
print(list_data[1])
# Access the thrid element. As it is also a list, all its elements will be printed.
print(list_data[3])
# Access the list element using the name of the element.
print(list_data$A_Matrix)
# Get and print current working directory.
print(getwd())
# Get and print current working directory.
print(getwd())
# Set current working directory.
setwd("/web/com")
# Set current working directory.
setwd("c:/workspace/LEARNING-R/data-interfaces")
# Get and print current working directory.
print(getwd())
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/sample1.csv")
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
# analysing CSV file
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
# Get the max salary from data frame.
sal <- max(data$salary)
print(sal)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
# Get the max salary from data frame.
sal <- max(data$salary)
print(sal)
misal <-min(data$salary)
print(minsal)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
# Get the max salary from data frame.
sal <- max(data$salary)
print(sal)
misal <- min(data$salary)
print(minsal)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
# Get the max salary from data frame.
sal <- max(data$salary)
print(sal)
minsal <- min(data$salary)
print(minsal)
#Get the details of the person with max salary
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
# Get the max salary from data frame.
sal <- max(data$salary)
# Get the person detail having max salary.
retval <- subset(data, salary == max(salary))
print(retval)
#Get the details of the person with max salary
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
# Get the max salary from data frame.
sal <- max(data$salary)
# Get the person detail having max salary.
retval <- subset(data, salary == max(salary))
print(retval)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
retval <- subset( data, dept == "IT")
print(retval)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
retval <- subset( data, dept == "IT")
print(retval)
#Get the persons in IT department whose salary is greater than 600
info <- subset(data, salary > 600 & dept == "IT")
print(info)
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
print(data)
#Get the persons in IT department whose salary is greater than 600
info <- subset(data, salary > 600 & dept == "IT")
print(info)
#Get the people who joined on or after 2014
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
print(retval)
#Writing to CSV file
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"c:/workspace/LEARNING-R/data-interfaces/output/output.csv")
newdata <- read.csv("c:/workspace/LEARNING-R/data-interfaces/output/output.csv")
print(newdata)
# Here the column X comes from the data set newper. This can be dropped using additional parameters while writing the file.
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Here the column X comes from the data set newper. This can be dropped using additional parameters while writing the file.
# Create a data frame.
data <- read.csv("c:/workspace/LEARNING-R/data-interfaces/input/sample1.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"c:/workspace/LEARNING-R/data-interfaces/output/output1.csv", row.names = FALSE)
newdata <- read.csv("c:/workspace/LEARNING-R/data-interfaces/output/output1.csv")
print(newdata)
print(list_data)
install.packages("rjson")
# Print the result.
print(result)
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "c:\workspace\LEARNING-R\data-interfaces\json_input\input_json.json")
# Print the result.
print(result)
# Give the input file name to the function.
result <- fromJSON(file = "\workspace\LEARNING-R\data-interfaces\json_input\input_json.json")
# Give the input file name to the function.
result <- fromJSON(file = "c://workspace\LEARNING-R\data-interfaces\json_input\input_json.json")
# Give the input file name to the function.
result <- fromJSON(file = "c://workspace//LEARNING-R//data-interfaces//json_input//input_json.json")
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "c://workspace//LEARNING-R//data-interfaces//json_input//input_json.json")
# Print the result.
print(result)
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "c://workspace//LEARNING-R//data-interfaces//json_input//input_json.json")
# Print the result.
print(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
print(json_data_frame)
install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
# Identify only the links which point to the JCMB 2015 files.
filenames <- links[str_detect(links, "JCMB_2015")]
# Store the file names as a list.
filenames_list <- as.list(filenames)
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
install.packages("RTool")
install.packages("RTools")
